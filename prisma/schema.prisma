// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    journals      Journal[]
    createdChats  Chat[]       @relation("CreatorChats")
    joinedChats   Chat[]       @relation("JoinerChats")
    endRequests   EndRequest[]
}

model Journal {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String   @db.Text
    summary     String   @db.Text
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
}

model Chat {
    id                   String       @id @default(cuid())
    createdAt            DateTime     @default(now())
    updatedAt            DateTime     @updatedAt
    expiresAt            DateTime
    leftTopic            String
    rightTopic           String
    description          String       @db.Text
    creator              User         @relation("CreatorChats", fields: [creatorId], references: [id])
    creatorId            String
    joiner               User?        @relation("JoinerChats", fields: [joinerId], references: [id])
    joinerId             String?
    creatorSelectedTopic String?
    joinerSelectedTopic  String?
    messages             Message[]
    status               ChatStatus
    chatTurn             ChatTurn     @default(CREATOR)
    endRequest           EndRequest[]
}

model EndRequest {
    id        String           @id @default(cuid())
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    chat      Chat             @relation(fields: [chatId], references: [id])
    chatId    String
    user      User             @relation(fields: [userId], references: [id])
    userId    String
    status    EndRequestStatus
}

model Message {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    chat      Chat        @relation(fields: [chatId], references: [id])
    chatId    String
    text      String      @db.Text
    type      MessageType
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ChatStatus {
    PENDING
    ACCEPTED
    ON_GOING
    EXPIRED
    DONE
}

enum MessageType {
    CREATOR
    JOINER
}

enum ChatTurn {
    CREATOR
    JOINER
}

enum EndRequestStatus {
    PENDING
    ACCEPTED
    REJECTED
}
